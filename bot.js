const TelegramBot = require('node-telegram-bot-api');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });
const dbPath = path.join(__dirname, 'database.sqlite');
const db = new sqlite3.Database(dbPath);

// –°–∏—Å—Ç–µ–º–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
const REPUTATION_SYSTEM = {
  levels: {
    0: { name: '–ù–æ–≤–∏—á–æ–∫', badge: 'üå±' },
    10: { name: '–ó–Ω–∞—Ç–æ–∫', badge: 'üìö' },
    30: { name: '–≠–∫—Å–ø–µ—Ä—Ç', badge: 'üéØ' },
    50: { name: '–ú—É–¥—Ä–µ—Ü', badge: 'üß†' },
    100: { name: '–ü–∞—Ç—Ä–∏–∞—Ä—Ö', badge: 'üëë' }
  },
  ratings: {
    'thanks': { points: 1, text: 'üôè –°–ø–∞—Å–∏–±–æ' },
    'useful': { points: 2, text: 'üëç –ü–æ–ª–µ–∑–Ω–æ' },
    'average': { points: 1, text: 'üëå –ù–µ–ø–ª–æ—Ö–æ' },
    'super': { points: 3, text: 'üî• –°—É–ø–µ—Ä!' }
  }
};

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
const EXPERTISE_CATEGORIES = [
  'üíº –ö–∞—Ä—å–µ—Ä–∞ –∏ –±–∏–∑–Ω–µ—Å',
  '‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è –∏ —Å–µ–º—å—è',
  'üí∞ –§–∏–Ω–∞–Ω—Å—ã –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
  'üë∂ –í–æ—Å–ø–∏—Ç–∞–Ω–∏–µ –¥–µ—Ç–µ–π',
  'üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ',
  'üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∏ –ñ–ö–•',
  '‚öñÔ∏è –Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è',
  'üè• –ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ–¥–∏—Ü–∏–Ω–∞',
  'üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞—É–∫–∞',
  'üöó –ê–≤—Ç–æ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
  'üõ† –†–µ–º–æ–Ω—Ç –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
  'üé® –ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ',
  'üç≥ –ö—É–ª–∏–Ω–∞—Ä–∏—è –∏ –¥–æ–º–æ–≤–æ–¥—Å—Ç–≤–æ',
  '‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ —Ç—É—Ä–∏–∑–º',
  'üéØ –î—Ä—É–≥–æ–µ'
];

// –°—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const OCCUPATIONS = [
  'IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
  '–ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ', 
  '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞—É–∫–∞',
  '–ë–∏–∑–Ω–µ—Å –∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ',
  '–§–∏–Ω–∞–Ω—Å—ã –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
  '–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è',
  '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –∏ –∫–æ—É—á–∏–Ω–≥',
  '–ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ',
  '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
  '–¢–æ—Ä–≥–æ–≤–ª—è –∏ –ø—Ä–æ–¥–∞–∂–∏',
  '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª—É–∂–±–∞',
  '–°–ø–æ—Ä—Ç –∏ —Ñ–∏—Ç–Ω–µ—Å',
  '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
  '–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ',
  '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞',
  '–î—Ä—É–≥–æ–µ'
];

// –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
const REMINDERS = {
  active: [
    "üí≠ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç? –°–ø—Ä–æ—Å–∏—Ç–µ —É –°—Ç–∞—Ä—à–∏—Ö - –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞–∑–Ω—ã–µ –º–Ω–µ–Ω–∏—è!",
    "ü§î –ù–∞–∫–æ–ø–∏–ª–∏—Å—å –º—ã—Å–ª–∏? –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É - –ø–æ–ª—É—á–∏—Ç–µ –º—É–¥—Ä—ã–µ —Å–æ–≤–µ—Ç—ã",
    "üå± –ù–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ß–µ–º –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤–∞–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Å–µ–≥–æ–¥–Ω—è?",
    "üéØ –ü–æ–º–Ω–∏—Ç–µ: –¥–∞–∂–µ –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –º—É–¥—Ä—ã–π –æ—Ç–≤–µ—Ç!",
    "ü§ù –ö—Ç–æ-—Ç–æ —Å–µ–π—á–∞—Å –∏—â–µ—Ç –∏–º–µ–Ω–Ω–æ –≤–∞—à —Å–æ–≤–µ—Ç - –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º!"
  ],
  resting: [
    "üí´ –°–æ–æ–±—â–µ—Å—Ç–≤–æ —Å–∫—É—á–∞–µ—Ç –ø–æ –≤–∞—à–µ–π –º—É–¥—Ä–æ—Å—Ç–∏! –ö—Ç–æ-—Ç–æ –∂–¥–µ—Ç –∏–º–µ–Ω–Ω–æ –≤–∞—à–µ–≥–æ —Å–æ–≤–µ—Ç–∞...",
    "üåø –û—Ç–¥–æ—Ö–Ω—É–ª–∏ –∏ –≥–æ—Ç–æ–≤—ã —Å–Ω–æ–≤–∞ –ø–æ–º–æ–≥–∞—Ç—å? –í–∞—à –æ–ø—ã—Ç –±–µ—Å—Ü–µ–Ω–µ–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö!",
    "ü§ù –ù–∞—Å —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ –±–µ–∑ –≤–∞—Å! –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –æ—Ç–≤–µ—Ç–∞–º - –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è –Ω—É–∂–Ω—ã",
    "üéØ –ù–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∂–¥—É—Ç –≤–∞—à–µ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ –º–Ω–µ–Ω–∏—è!",
    "üí° –í–∞—à –ø—Ä–æ—à–ª—ã–π —Å–æ–≤–µ—Ç –∫–æ–º—É-—Ç–æ –æ—á–µ–Ω—å –ø–æ–º–æ–≥ - –º–æ–∂–µ—Ç, –ø–æ–º–æ–∂–µ—Ç–µ –µ—â–µ —Ä–∞–∑?"
  ]
};

// Onboarding –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
const ONBOARDING = [
  { day: 1, text: "üëã *–î–µ–Ω—å 1:* –í—ã —Å—Ç–∞–ª–∏ —á–∞—Å—Ç—å—é —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ '–°–ø—Ä–æ—Å–∏ —É —Å—Ç–∞—Ä—à–µ–≥–æ'! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ª—é–±—ã–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –ª—é–¥–µ–π —Å –æ–ø—ã—Ç–æ–º." },
  { day: 2, text: "üí° *–î–µ–Ω—å 2:* –ü–æ–º–Ω–∏—Ç–µ - –≤—ã –º–æ–∂–µ—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å, –Ω–æ –∏ –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º! –î–∞–∂–µ –æ–¥–∏–Ω –≤–∞—à —Å–æ–≤–µ—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —á—å—é-—Ç–æ –∂–∏–∑–Ω—å." },
  { day: 3, text: "üå± *–î–µ–Ω—å 3:* –°–æ–æ–±—â–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç–∞–∫–∏–º –∫–∞–∫ –≤—ã! –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –∑–¥–µ—Å—å –≤–∞—Å —Ç–æ—á–Ω–æ –ø–æ–π–º—É—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç." }
];

// –ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞
const RULES = {
  short: `‚ùó *–ü–†–ê–í–ò–õ–ê –°–ï–†–í–ò–°–ê*
‚Ä¢ üîí –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å - –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º –§–ò–û, –∫–æ–Ω—Ç–∞–∫—Ç—ã
‚Ä¢ üíô –£–≤–∞–∂–∞–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞
‚Ä¢ üìö –°–æ–≤–µ—Ç—ã –Ω–æ—Å—è—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä
‚Ä¢ üö´ –ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ —Å–ø–∞–º`,
  
  detailed: `üìú *–ü–û–õ–û–ñ–ï–ù–ò–ï –û –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–ò*

*1. –ê–ù–û–ù–ò–ú–ù–û–°–¢–¨*
–°–µ—Ä–≤–∏—Å –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç –∏ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∑–≤–æ–ª—è—é—â–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å. –í—Å–µ –æ–±—â–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–æ.

*2. –¶–ï–õ–ò –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–•*
–í–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª –∏ —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ 152-–§–ó.

*3. –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–¨*
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ—Å—É—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –¥–∞–≤–∞–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.

*4. –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò*
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å.

*5. –°–û–ì–õ–ê–°–ò–ï*
–ò—Å–ø–æ–ª—å–∑—É—è —Å–µ—Ä–≤–∏—Å, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.

*–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º:* –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞`
};

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
db.serialize(() => {
  db.run(`CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT,
    age INTEGER,
    gender TEXT DEFAULT '–Ω–µ —É–∫–∞–∑–∞–Ω',
    occupation TEXT,
    expertises TEXT,
    bio TEXT,
    rating REAL DEFAULT 0,
    answers_count INTEGER DEFAULT 0,
    questions_count INTEGER DEFAULT 0,
    reputation_points INTEGER DEFAULT 0,
    is_resting INTEGER DEFAULT 0,
    rest_start_date DATETIME,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  )`);
  
  db.run(`CREATE TABLE IF NOT EXISTS questions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    text TEXT,
    category TEXT,
    status TEXT DEFAULT 'active',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  )`);
  
  db.run(`CREATE TABLE IF NOT EXISTS answers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    question_id INTEGER,
    user_id INTEGER,
    text TEXT,
    rating INTEGER DEFAULT 0,
    reputation_earned INTEGER DEFAULT 0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  )`);
  
  db.run(`CREATE TABLE IF NOT EXISTS user_reminders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    type TEXT,
    last_sent DATETIME,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  )`);
  
  db.run(`CREATE TABLE IF NOT EXISTS onboarding (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    day INTEGER DEFAULT 1,
    last_sent DATETIME,
    completed INTEGER DEFAULT 0
  )`);
  
  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!');
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function dbGet(query, params = []) {
  return new Promise((resolve, reject) => {
    db.get(query, params, (err, row) => {
      if (err) reject(err);
      else resolve(row);
    });
  });
}

function dbAll(query, params = []) {
  return new Promise((resolve, reject) => {
    db.all(query, params, (err, rows) => {
      if (err) reject(err);
      else resolve(rows);
    });
  });
}

function dbRun(query, params = []) {
  return new Promise((resolve, reject) => {
    db.run(query, params, function(err) {
      if (err) reject(err);
      else resolve({ id: this.lastID, changes: this.changes });
    });
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
function getReputationLevel(points) {
  const levels = Object.keys(REPUTATION_SYSTEM.levels).map(Number).sort((a, b) => b - a);
  for (const level of levels) {
    if (points >= level) {
      return REPUTATION_SYSTEM.levels[level];
    }
  }
  return REPUTATION_SYSTEM.levels[0];
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
async function formatUserProfile(userId) {
  const user = await dbGet('SELECT age, gender, occupation, reputation_points FROM users WHERE id = ?', [userId]);
  if (!user) return '';
  
  const level = getReputationLevel(user.reputation_points);
  return `\n\nüë§ *–°–æ–≤–µ—Ç –æ—Ç:* ${user.age || '?'} –ª–µ—Ç, ${user.gender}, ${user.occupation || '—Å—Ñ–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'} ${level.badge} ${level.name}`;
}

const userStates = {};

// –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
const processingCallbacks = new Set();

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu(chatId) {
  bot.sendMessage(chatId, `üéØ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é "–°–ø—Ä–æ—Å–∏ —É —Å—Ç–∞—Ä—à–µ–≥–æ"*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: 'ask_question' }],
        [{ text: 'üí° –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã', callback_data: 'browse_questions' }],
        [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'my_profile' }],
        [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }],
        [{ text: 'üìú –ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞', callback_data: 'show_rules' }]
      ]
    }
  });
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  
  await bot.sendMessage(chatId, `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *"–°–ø—Ä–æ—Å–∏ —É —Å—Ç–∞—Ä—à–µ–≥–æ"*!\n\n–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –º—É–¥—Ä—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –æ–ø—ã—Ç–Ω—ã—Ö –ª—é–¥–µ–π –ø–æ –ª—é–±—ã–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.`, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚ú® –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–µ—Ä–≤–∏—Å–µ', callback_data: 'learn_more' }],
        [{ text: 'üöÄ –ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è', callback_data: 'start_using' }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  const messageId = query.message.message_id;
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
  const callbackKey = `${chatId}_${data}_${messageId}`;
  if (processingCallbacks.has(callbackKey)) {
    await bot.answerCallbackQuery(query.id, { text: '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...' });
    return;
  }
  
  processingCallbacks.add(callbackKey);
  
  try {
    // –£—Ä–æ–≤–µ–Ω—å 2 - –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ —Å–µ—Ä–≤–∏—Å–µ
    if (data === 'learn_more') {
      await bot.editMessageText(`üí´ *–ß—Ç–æ —Ç–∞–∫–æ–µ "–°–ø—Ä–æ—Å–∏ —É —Å—Ç–∞—Ä—à–µ–≥–æ"?*\n\n–≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –≥–¥–µ:\n‚Ä¢ ü§ù *–í—ã –º–æ–∂–µ—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å* - –æ –∫–∞—Ä—å–µ—Ä–µ, –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö, —Ñ–∏–Ω–∞–Ω—Å–∞—Ö, –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–∏ –¥–µ—Ç–µ–π\n‚Ä¢ üí° *–ü–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–Ω–µ–Ω–∏–π* - –≤–∞—à –≤–æ–ø—Ä–æ—Å —É–≤–∏–¥—è—Ç —Ä–∞–∑–Ω—ã–µ –æ–ø—ã—Ç–Ω—ã–µ –ª—é–¥–∏\n‚Ä¢ üß† *–î–µ–ª–∏—Ç—å—Å—è –º—É–¥—Ä–æ—Å—Ç—å—é* - –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º\n\n*–ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:*\n"–ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –≤ 35 –ª–µ—Ç?"\n"–ö–∞–∫ –Ω–∞–ª–∞–¥–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–º?"\n"–°—Ç–æ–∏—Ç –ª–∏ –±—Ä–∞—Ç—å –∏–ø–æ—Ç–µ–∫—É –≤ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏?"\n\n*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n1. –ó–∞–¥–∞–µ—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Üí –≤—ã–±–∏—Ä–∞–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n2. –í–æ–ø—Ä–æ—Å –ø–æ–ª—É—á–∞—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ "–°—Ç–∞—Ä—à–∏—Ö" –∏–∑ —ç—Ç–æ–π —Å—Ñ–µ—Ä—ã\n3. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 3-5 —Ä–∞–∑–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å –º–Ω–µ–Ω–∏—è–º–∏\n4. –ú–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã\n\nüîí *–ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞*`, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìú –ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞', callback_data: 'show_rules' }],
            [{ text: 'üöÄ –ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è', callback_data: 'start_using' }]
          ]
        }
      });
      return;
    }

    // –ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞
    if (data === 'show_rules') {
      await bot.editMessageText(RULES.detailed, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üöÄ –ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è', callback_data: 'start_using' }],
            [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'learn_more' }]
          ]
        }
      });
      return;
    }

    // –ù–∞—á–∞–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    if (data === 'start_using') {
      const userExists = await dbGet('SELECT id FROM users WHERE id = ?', [chatId]);
      
      if (!userExists) {
        userStates[chatId] = { step: 'creating_profile', profile: {} };
        await bot.editMessageText(`üéØ *–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n–ß—Ç–æ–±—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–∞–ª–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:\n\n*–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç* - —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–≤–µ—Ç–æ–≤\n*–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏* - –≤ —á–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º\n*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã* - –∫–∞–∫–∏–µ —Ç–µ–º—ã –≤–∞–º –±–ª–∏–∑–∫–∏\n\n‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! \n–≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤.`, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'create_profile' }]
            ]
          }
        });
      } else {
        showMainMenu(chatId);
      }
      return;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è - –Ω–∞—á–∞–ª–æ
    if (data === 'create_profile') {
      userStates[chatId] = { step: 'asking_age', profile: {} };
      await bot.sendMessage(chatId, 'üìù *–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?*\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):', {
        parse_mode: 'Markdown'
      });
      return;
    }

    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (data === 'main_menu') {
      showMainMenu(chatId);
      return;
    }

    // –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    if (data === 'ask_question') {
      userStates[chatId] = { step: 'asking_question' };
      await bot.sendMessage(chatId, 'üìù *–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:*\n\n–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏–ª–∏ –≤ —á–µ–º –Ω—É–∂–µ–Ω —Å–æ–≤–µ—Ç:', {
        parse_mode: 'Markdown'
      });
      return;
    }

    // –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
    if (data.startsWith('ask_cat_')) {
      const categoryIndex = parseInt(data.split('_')[2]);
      const category = EXPERTISE_CATEGORIES[categoryIndex];
      
      if (userStates[chatId] && userStates[chatId].step === 'asking_question_category') {
        await processQuestion(chatId, userStates[chatId].questionText, category);
        delete userStates[chatId];
        
        await bot.deleteMessage(chatId, messageId);
      }
      return;
    }

    // –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    if (data === 'browse_questions') {
      await showAvailableQuestions(chatId);
      return;
    }

    // –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    if (data.startsWith('answer_')) {
      const questionId = parseInt(data.split('_')[1]);
      userStates[chatId] = { step: 'answering_question', questionId };
      await bot.sendMessage(chatId, 'üí° *–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:*\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º –∏ –º–Ω–µ–Ω–∏–µ–º:', {
        parse_mode: 'Markdown'
      });
      return;
    }

    // –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    if (data === 'my_profile') {
      await showUserProfile(chatId);
      return;
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    if (data === 'settings') {
      await showSettings(chatId);
      return;
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (data === 'edit_categories') {
      await editExpertiseCategories(chatId);
      return;
    }

    // –í—ã–±–æ—Ä/–æ—Ç–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (data.startsWith('toggle_cat_')) {
      const categoryIndex = parseInt(data.split('_')[2]);
      await toggleExpertiseCategory(chatId, categoryIndex, messageId);
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (data === 'save_categories') {
      await saveExpertiseCategories(chatId, messageId);
      return;
    }

    // –†–µ–∂–∏–º –æ—Ç–¥—ã—Ö–∞
    if (data === 'toggle_rest') {
      await toggleRestMode(chatId);
      return;
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–¥—ã—Ö–∞
    if (data === 'stop_rest') {
      await dbRun('UPDATE users SET is_resting = 0 WHERE id = ?', [chatId]);
      await bot.sendMessage(chatId, 'üöÄ –û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–Ω–æ–≤–∞ –≤ —Å—Ç—Ä–æ—é! –¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã.');
      showMainMenu(chatId);
      return;
    }

    // –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if (data.startsWith('rate_')) {
      const [_, answerId, rating] = data.split('_');
      await rateAnswer(chatId, parseInt(answerId), rating);
      return;
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  } finally {
    // –£–¥–∞–ª—è–µ–º –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      processingCallbacks.delete(callbackKey);
    }, 2000);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  if (!msg.text || msg.text.startsWith('/')) return;
  
  const chatId = msg.chat.id;
  const text = msg.text;

  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è - –≤–æ–∑—Ä–∞—Å—Ç
    if (userStates[chatId] && userStates[chatId].step === 'asking_age') {
      const age = parseInt(text);
      if (age && age > 0 && age < 120) {
        userStates[chatId].profile.age = age;
        userStates[chatId].step = 'asking_gender';
        
        await bot.sendMessage(chatId, 'üë§ *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:*', {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ú—É–∂—Å–∫–æ–π', callback_data: 'gender_male' }, { text: '–ñ–µ–Ω—Å–∫–∏–π', callback_data: 'gender_female' }],
              [{ text: '–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å', callback_data: 'gender_skip' }]
            ]
          }
        });
      } else {
        await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 1 –¥–æ 120):');
      }
      return;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è - –ø–æ–ª (—á–µ—Ä–µ–∑ callback)
    if (msg.text && userStates[chatId] && userStates[chatId].step === 'asking_gender') {
      // –ü–æ–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ callback, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      return;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è - —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (userStates[chatId] && userStates[chatId].step === 'asking_occupation') {
      userStates[chatId].profile.occupation = text;
      userStates[chatId].step = 'asking_expertise';
      
      await showExpertiseSelection(chatId, true);
      return;
    }

    // –í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userStates[chatId] && userStates[chatId].step === 'asking_question') {
      userStates[chatId].questionText = text;
      userStates[chatId].step = 'asking_question_category';
      
      await bot.sendMessage(chatId, 'üìã *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:*', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            ...EXPERTISE_CATEGORIES.map((cat, index) => [
              { text: cat, callback_data: `ask_cat_${index}` }
            ]),
            [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
          ]
        }
      });
      return;
    }

    // –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if (userStates[chatId] && userStates[chatId].step === 'answering_question') {
      await processAnswer(chatId, userStates[chatId].questionId, text);
      delete userStates[chatId];
      return;
    }

    // –ï—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –∏ —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  if (data.startsWith('gender_')) {
    const gender = data.split('_')[1];
    let genderText = '–Ω–µ —É–∫–∞–∑–∞–Ω';
    
    if (gender === 'male') genderText = '–º—É–∂—Å–∫–æ–π';
    if (gender === 'female') genderText = '–∂–µ–Ω—Å–∫–∏–π';
    
    if (userStates[chatId] && userStates[chatId].step === 'asking_gender') {
      userStates[chatId].profile.gender = genderText;
      userStates[chatId].step = 'asking_occupation';
      
      await bot.editMessageText('üíº *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:*', {
        chat_id: chatId,
        message_id: query.message.message_id,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            ...OCCUPATIONS.map((occ, index) => [
              { text: occ, callback_data: `occupation_${index}` }
            ]),
            [{ text: '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é', callback_data: 'occupation_custom' }]
          ]
        }
      });
    }
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  if (data.startsWith('occupation_')) {
    const occupationIndex = parseInt(data.split('_')[1]);
    const occupation = OCCUPATIONS[occupationIndex];
    
    if (userStates[chatId] && userStates[chatId].step === 'asking_occupation') {
      userStates[chatId].profile.occupation = occupation;
      userStates[chatId].step = 'asking_expertise';
      
      await bot.deleteMessage(chatId, query.message.message_id);
      await showExpertiseSelection(chatId, true);
    }
    return;
  }

  // –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  if (data === 'occupation_custom') {
    if (userStates[chatId] && userStates[chatId].step === 'asking_occupation') {
      await bot.sendMessage(chatId, 'üíº *–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:*');
      // –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    }
    return;
  }
});

// ==================== –§–£–ù–ö–¶–ò–ò –ü–†–û–§–ò–õ–Ø ====================

// –ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
async function showExpertiseSelection(chatId, isFirstTime = false) {
  console.log(`üéØ –ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
  
  try {
    let currentExpertises = [];
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (userStates[chatId] && userStates[chatId].profile && userStates[chatId].profile.expertises) {
      currentExpertises = userStates[chatId].profile.expertises.split(', ');
    } else {
      const user = await dbGet('SELECT expertises FROM users WHERE id = ?', [chatId]);
      currentExpertises = user && user.expertises ? user.expertises.split(', ') : [];
    }
    
    console.log(`üìã –¢–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${currentExpertises.join(', ')}`);
    
    const keyboard = EXPERTISE_CATEGORIES.map((cat, index) => [
      { 
        text: currentExpertises.includes(cat) ? `‚úÖ ${cat}` : cat, 
        callback_data: `toggle_cat_${index}`
      }
    ]);
    
    keyboard.push([{ text: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: 'save_categories' }]);
    
    const messageText = isFirstTime ? 
      `üéØ *–í –∫–∞–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –≤—ã –º–æ–∂–µ—Ç–µ –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã?*\n\n‚úÖ –í—ã–±—Ä–∞–Ω–æ: ${currentExpertises.length} –∏–∑ 7 –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n\n–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):` :
      `üéØ *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã:*\n\n‚úÖ –í—ã–±—Ä–∞–Ω–æ: ${currentExpertises.length} –∏–∑ 7 –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n\n–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã:`;
    
    await bot.sendMessage(chatId, messageText, {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: keyboard }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function toggleExpertiseCategory(chatId, categoryIndex, messageId) {
  console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryIndex} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
  
  try {
    const category = EXPERTISE_CATEGORIES[categoryIndex];
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await dbGet('SELECT expertises FROM users WHERE id = ?', [chatId]);
    let currentExpertises = [];
    
    if (user && user.expertises) {
      currentExpertises = user.expertises.split(', ');
    } else if (userStates[chatId] && userStates[chatId].profile) {
      // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–µ—Ç—Å—è, –±–µ—Ä–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      currentExpertises = userStates[chatId].profile.expertises ? 
        userStates[chatId].profile.expertises.split(', ') : [];
    }
    
    console.log(`üìã –¢–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${currentExpertises.join(', ')}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if (currentExpertises.includes(category)) {
      // –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      currentExpertises = currentExpertises.filter(cat => cat !== category);
      console.log(`‚ùå –£–¥–∞–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}`);
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç)
      if (currentExpertises.length < 7) {
        currentExpertises.push(category);
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}`);
      } else {
        await bot.answerCallbackQuery({ 
          text: '‚ùå –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 7 –∫–∞—Ç–µ–≥–æ—Ä–∏–π!', 
          show_alert: true 
        });
        return;
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ –≤ –±–∞–∑—É
    if (userStates[chatId] && userStates[chatId].profile) {
      userStates[chatId].profile.expertises = currentExpertises.join(', ');
    } else {
      await dbRun('UPDATE users SET expertises = ? WHERE id = ?', [currentExpertises.join(', '), chatId]);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = EXPERTISE_CATEGORIES.map((cat, index) => [
      { 
        text: currentExpertises.includes(cat) ? `‚úÖ ${cat}` : cat, 
        callback_data: `toggle_cat_${index}`
      }
    ]);
    
    keyboard.push([{ text: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: 'save_categories' }]);
    
    const messageText = `üéØ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—ã —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã:*\n\n‚úÖ –í—ã–±—Ä–∞–Ω–æ: ${currentExpertises.length} –∏–∑ 7 –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n\n–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã:`;
    
    await bot.editMessageText(messageText, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: keyboard }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    await bot.answerCallbackQuery({ 
      text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 
      show_alert: true 
    });
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async function saveExpertiseCategories(chatId, messageId) {
  console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
  
  try {
    let currentExpertises = [];
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –∏–∑ –±–∞–∑—ã
    if (userStates[chatId] && userStates[chatId].profile && userStates[chatId].profile.expertises) {
      currentExpertises = userStates[chatId].profile.expertises.split(', ');
    } else {
      const user = await dbGet('SELECT expertises FROM users WHERE id = ?', [chatId]);
      currentExpertises = user && user.expertises ? user.expertises.split(', ') : [];
    }
    
    console.log(`üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${currentExpertises.join(', ')}`);
    
    if (currentExpertises.length === 0) {
      await bot.answerCallbackQuery({ 
        text: '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!', 
        show_alert: true 
      });
      return;
    }
    
    if (userStates[chatId] && userStates[chatId].step === 'asking_expertise') {
      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
      userStates[chatId].profile.expertises = currentExpertises.join(', ');
      await completeProfileCreation(chatId);
    } else {
      // –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      await dbRun('UPDATE users SET expertises = ? WHERE id = ?', [currentExpertises.join(', '), chatId]);
      
      await bot.editMessageText(`‚úÖ *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!*\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ ${currentExpertises.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n‚Ä¢ ${currentExpertises.join('\n‚Ä¢ ')}`, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown'
      });
      
      // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –º–µ–Ω—é
      setTimeout(() => {
        showMainMenu(chatId);
      }, 1000);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    await bot.answerCallbackQuery({ 
      text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 
      show_alert: true 
    });
  }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
async function completeProfileCreation(chatId) {
  const { profile } = userStates[chatId];
  
  await dbRun(
    `INSERT INTO users (id, username, age, gender, occupation, expertises, reputation_points) 
     VALUES (?, ?, ?, ?, ?, ?, ?)`,
    [chatId, userStates[chatId].username, profile.age, profile.gender, profile.occupation, profile.expertises, 0]
  );
  
  delete userStates[chatId];
  
  await bot.sendMessage(chatId, `üéâ *–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!*\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ üìù –ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å–æ–æ–±—â–µ—Å—Ç–≤—É\n‚Ä¢ üí° –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ –≤–∞—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö\n‚Ä¢ üå± –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ "–°–ø—Ä–æ—Å–∏ —É —Å—Ç–∞—Ä—à–µ–≥–æ"!`, {
    parse_mode: 'Markdown'
  });
  
  showMainMenu(chatId);
}

// –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function showUserProfile(chatId) {
  const user = await dbGet(`
    SELECT age, gender, occupation, expertises, reputation_points, answers_count, questions_count 
    FROM users WHERE id = ?
  `, [chatId]);
  
  if (!user) {
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.');
    return;
  }
  
  const level = getReputationLevel(user.reputation_points);
  const expertiseList = user.expertises ? user.expertises.split(', ').join('\n‚Ä¢ ') : '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã';
  
  const profileText = `üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n` +
    `*–û—Å–Ω–æ–≤–Ω–æ–µ:*\n` +
    `‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: ${user.age || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
    `‚Ä¢ –ü–æ–ª: ${user.gender || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
    `‚Ä¢ –°—Ñ–µ—Ä–∞: ${user.occupation || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n` +
    `*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
    `‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: ${level.badge} ${level.name}\n` +
    `‚Ä¢ –†–µ–ø—É—Ç–∞—Ü–∏—è: ${user.reputation_points} –æ—á–∫–æ–≤\n` +
    `‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ –¥–∞–Ω–æ: ${user.answers_count || 0}\n` +
    `‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–Ω–æ: ${user.questions_count || 0}\n\n` +
    `*–ú–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:*\n‚Ä¢ ${expertiseList}`;
  
  await bot.sendMessage(chatId, profileText, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: 'edit_categories' }],
        [{ text: '‚Ü©Ô∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'main_menu' }]
      ]
    }
  });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
async function showSettings(chatId) {
  const user = await dbGet('SELECT is_resting FROM users WHERE id = ?', [chatId]);
  
  if (!user) {
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return;
  }
  
  const restButtonText = user.is_resting ? 'üöÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ç–≤–µ—Ç–∞–º' : 'üå¥ –í–æ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –æ—Ç–¥—ã—Ö–∞';
  const restButtonData = user.is_resting ? 'stop_rest' : 'toggle_rest';
  
  await bot.sendMessage(chatId, '‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*', {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: restButtonText, callback_data: restButtonData }],
        [{ text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: 'edit_categories' }],
        [{ text: 'üìú –ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞', callback_data: 'show_rules' }],
        [{ text: '‚Ü©Ô∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'main_menu' }]
      ]
    }
  });
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async function editExpertiseCategories(chatId) {
  await showExpertiseSelection(chatId, false);
}

// –†–µ–∂–∏–º –æ—Ç–¥—ã—Ö–∞
async function toggleRestMode(chatId) {
  await dbRun('UPDATE users SET is_resting = 1, rest_start_date = datetime("now") WHERE id = ?', [chatId]);
  await bot.sendMessage(chatId, 'üå¥ *–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –æ—Ç–¥—ã—Ö–∞!*\n\n–í—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞. –û—Ç–¥—ã—Ö–∞–π—Ç–µ!\n\n–ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º —á–µ—Ä–µ–∑ 3 –¥–Ω—è, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è.', {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –í–µ—Ä–Ω—É—Ç—å—Å—è —Å–µ–π—á–∞—Å', callback_data: 'stop_rest' }],
        [{ text: '‚Ü©Ô∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'main_menu' }]
      ]
    }
  });
}

// ==================== –°–ò–°–¢–ï–ú–ê –í–û–ü–†–û–°–û–í –ò –û–¢–í–ï–¢–û–í ====================

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
async function processQuestion(askerId, questionText, category) {
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å
    const result = await dbRun(
      'INSERT INTO questions (user_id, text, category) VALUES (?, ?, ?)',
      [askerId, questionText, category]
    );
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    await dbRun('UPDATE users SET questions_count = questions_count + 1 WHERE id = ?', [askerId]);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–¥—ã—Ö–∞)
    const experts = await dbAll(
      `SELECT id FROM users 
       WHERE expertises LIKE ? 
       AND is_resting = 0 
       AND id != ?
       ORDER BY reputation_points DESC 
       LIMIT 10`,
      [`%${category}%`, askerId]
    );
    
    console.log(`üì® –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${experts.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º
    for (const expert of experts) {
      await bot.sendMessage(expert.id, `üì® *–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å* (${category}):\n\n${questionText}\n\nüí¨ *–û—Ç–≤–µ—Ç—å—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ.*`, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí° –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å', callback_data: `answer_${result.id}` }]
          ]
        }
      });
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ø—Ä–∞—à–∏–≤–∞—é—â–µ–≥–æ
    await bot.sendMessage(askerId, `‚úÖ *–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${experts.length} —ç–∫—Å–ø–µ—Ä—Ç–∞–º* –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}"!\n\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.`, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚Ü©Ô∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'main_menu' }]
        ]
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞:', error);
    await bot.sendMessage(askerId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
}

// –ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
async function showAvailableQuestions(chatId) {
  const user = await dbGet('SELECT expertises FROM users WHERE id = ?', [chatId]);
  
  if (!user || !user.expertises) {
    await bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.');
    return;
  }
  
  const expertises = user.expertises.split(', ');
  const placeholders = expertises.map(() => '?').join(', ');
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ó–ê–ü–†–û–° - –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
  const questions = await dbAll(`
    SELECT q.id, q.text, q.category, u.age, u.gender, u.occupation 
    FROM questions q 
    LEFT JOIN users u ON q.user_id = u.id 
    WHERE q.category IN (${placeholders}) 
    AND q.status = 'active' 
    AND q.user_id != ?
    AND q.id NOT IN (
      SELECT question_id FROM answers WHERE user_id = ?
    )
    ORDER BY q.created_at DESC 
    LIMIT 10
  `, [...expertises, chatId, chatId]);
  
  if (questions.length === 0) {
    await bot.sendMessage(chatId, 'ü§î –ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –≤–∞—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚Ü©Ô∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'main_menu' }]
        ]
      }
    });
    return;
  }
  
  for (const question of questions) {
    const askerProfile = `üë§ *–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç:* ${question.age || '?'} –ª–µ—Ç, ${question.gender || '?'}, ${question.occupation || '—Å—Ñ–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`;
    
    await bot.sendMessage(chatId, `üìã *–í–æ–ø—Ä–æ—Å* (${question.category}):\n\n${question.text}\n\n${askerProfile}`, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí° –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `answer_${question.id}` }]
        ]
      }
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
async function processAnswer(userId, questionId, answerText) {
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    const result = await dbRun(
      'INSERT INTO answers (question_id, user_id, text) VALUES (?, ?, ?)',
      [questionId, userId, answerText]
    );
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
    await dbRun('UPDATE users SET answers_count = answers_count + 1 WHERE id = ?', [userId]);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ –∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—â–µ–º
    const question = await dbGet(`
      SELECT q.user_id, q.text, u.age, u.gender, u.occupation 
      FROM questions q 
      LEFT JOIN users u ON q.user_id = u.id 
      WHERE q.id = ?
    `, [questionId]);
    
    if (question) {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const answererProfile = await formatUserProfile(userId);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å–ø—Ä–∞—à–∏–≤–∞—é—â–µ–º—É
      await bot.sendMessage(question.user_id, `üí´ *–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:*\n\n${answerText}${answererProfile}\n\n*–í–∞—à –≤–æ–ø—Ä–æ—Å:* "${question.text}"`, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üôè –°–ø–∞—Å–∏–±–æ', callback_data: `rate_${result.id}_thanks` },
              { text: 'üëç –ü–æ–ª–µ–∑–Ω–æ', callback_data: `rate_${result.id}_useful` }
            ],
            [
              { text: 'üëå –ù–µ–ø–ª–æ—Ö–æ', callback_data: `rate_${result.id}_average` },
              { text: 'üî• –°—É–ø–µ—Ä!', callback_data: `rate_${result.id}_super` }
            ]
          ]
        }
      });
    }
    
    await bot.sendMessage(userId, '‚úÖ *–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!* –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å —Å–æ–æ–±—â–µ—Å—Ç–≤—É! üéâ', {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìù –û—Ç–≤–µ—Ç–∏—Ç—å –µ—â–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã', callback_data: 'browse_questions' }],
          [{ text: '‚Ü©Ô∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'main_menu' }]
        ]
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞:', error);
    await bot.sendMessage(userId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.');
  }
}

// –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞
async function rateAnswer(raterId, answerId, ratingType) {
  try {
    const ratingConfig = REPUTATION_SYSTEM.ratings[ratingType];
    if (!ratingConfig) {
      await bot.answerCallbackQuery({ text: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ü–µ–Ω–∫–∏', show_alert: true });
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ
    const answer = await dbGet(`
      SELECT a.user_id, a.text, a.rating, q.text as question_text 
      FROM answers a 
      LEFT JOIN questions q ON a.question_id = q.id 
      WHERE a.id = ?
    `, [answerId]);
    
    if (!answer) {
      await bot.answerCallbackQuery({ text: '‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert: true });
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ
    await dbRun(
      'UPDATE users SET reputation_points = reputation_points + ? WHERE id = ?',
      [ratingConfig.points, answer.user_id]
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
    await dbRun(
      'UPDATE answers SET rating = rating + 1, reputation_earned = ? WHERE id = ?',
      [ratingConfig.points, answerId]
    );
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ –æ–± –æ—Ü–µ–Ω–∫–µ
    const raterProfile = await formatUserProfile(raterId);
    await bot.sendMessage(answer.user_id, `üéâ *–í–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–∏–ª –æ—Ü–µ–Ω–∫—É: ${ratingConfig.text}* (+${ratingConfig.points} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏)\n\n*–í–∞—à –æ—Ç–≤–µ—Ç:* ${answer.text}\n\n*–û—Ü–µ–Ω–µ–Ω –∑–∞ –≤–æ–ø—Ä–æ—Å:* "${answer.question_text}"${raterProfile}`, {
      parse_mode: 'Markdown'
    });
    
    await bot.answerCallbackQuery({ text: `‚úÖ –í—ã –æ—Ü–µ–Ω–∏–ª–∏ –æ—Ç–≤–µ—Ç –∫–∞–∫: ${ratingConfig.text}`, show_alert: true });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –æ—Ç–≤–µ—Ç–∞:', error);
    await bot.answerCallbackQuery({ text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ', show_alert: true });
  }
}

// –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
setInterval(async () => {
  try {
    const activeUsers = await dbAll(`
      SELECT u.id FROM users u 
      LEFT JOIN user_reminders ur ON u.id = ur.user_id AND ur.type = 'active' 
      WHERE u.is_resting = 0 
      AND (ur.last_sent IS NULL OR datetime(ur.last_sent) < datetime('now', '-3 days'))
      LIMIT 10
    `);
    
    for (const user of activeUsers) {
      const reminder = REMINDERS.active[Math.floor(Math.random() * REMINDERS.active.length)];
      await bot.sendMessage(user.id, reminder);
      await dbRun('INSERT OR REPLACE INTO user_reminders (user_id, type, last_sent) VALUES (?, ?, datetime("now"))', [user.id, 'active']);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
  }
}, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (–¥–ª—è —Ç–µ—Å—Ç–∞)

console.log('ü§ñ –ë–æ—Ç "–°–ø—Ä–æ—Å–∏ —É —Å—Ç–∞—Ä—à–µ–≥–æ" –∑–∞–ø—É—â–µ–Ω —Å–æ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏!');
